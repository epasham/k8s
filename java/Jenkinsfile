pipeline {
      environment {
            registry = "ronsonblossom/springboot"
            registryCredential = 'dockerhub'
        }
    agent any

    stages {
        stage('CheckOut the code') {
            steps {
                echo 'Building..'
                cleanWs()
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gitrepo'], [$class: 'CheckoutOption', timeout: 100000]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github_credronson', url: 'https://github.com/ronsonblossom/k8s.git']]])
            }
        }
        stage('Maven Build') {
            steps {
                dir("gitrepo/java/springboot-jsp-helloworld"){
                    sh 'mvn clean'
   	                sh 'mvn package' 
                    echo 'Testing..'
                }
                
            }
        }
        stage('DockerBuild') {
            steps {
                echo 'Deploying....'
                dir("gitrepo/java"){
                    sh 'docker build -t "$registry:$BUILD_NUMBER" -f Dockerfile .'
                }
            }
        }
        stage('DockerPush') {
            steps {
                echo 'DockerPush image....'
                withDockerRegistry(credentialsId: 'dockerhub_credronson', url: '') {
                    // some block
                    sh 'docker push "$registry:$BUILD_NUMBER"'
                }
            }
        }
        stage('Kuberenetes Deployment') {
            steps {
                dir("gitrepo/jenkins"){
                    
                    sh "sed -i \"s/vinish86\\/springboot:dev/ronsonblossom\\/springboot:$BUILD_NUMBER/g\" app-deployments.yaml"
                    sh 'kubectl apply -f app-deployments.yaml'
                    echo 'Creating..'
                }
                
            }
        }
    }
}
